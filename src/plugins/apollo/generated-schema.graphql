# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateCategoriesOnPosts {
  _avg: CategoriesOnPostsAvgAggregate
  _count: CategoriesOnPostsCountAggregate
  _max: CategoriesOnPostsMaxAggregate
  _min: CategoriesOnPostsMinAggregate
  _sum: CategoriesOnPostsSumAggregate
}

type AggregateCategory {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
}

type AggregateFile {
  _avg: FileAvgAggregate
  _count: FileCountAggregate
  _max: FileMaxAggregate
  _min: FileMinAggregate
  _sum: FileSumAggregate
}

type AggregatePost {
  _avg: PostAvgAggregate
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  _sum: PostSumAggregate
}

type AggregateTag {
  _avg: TagAvgAggregate
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  _sum: TagSumAggregate
}

type AggregateTagsOnPosts {
  _avg: TagsOnPostsAvgAggregate
  _count: TagsOnPostsCountAggregate
  _max: TagsOnPostsMaxAggregate
  _min: TagsOnPostsMinAggregate
  _sum: TagsOnPostsSumAggregate
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

type AuthRes {
  token: String!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type CategoriesOnPosts {
  category: Category!
  categoryId: Int!
  createdAt: DateTimeISO!
  createdBy: User!
  createdById: Int!
  post: Post!
  postId: Int!
  updatedAt: DateTimeISO!
}

type CategoriesOnPostsAvgAggregate {
  categoryId: Float
  createdById: Float
  postId: Float
}

input CategoriesOnPostsAvgOrderByAggregateInput {
  categoryId: SortOrder
  createdById: SortOrder
  postId: SortOrder
}

type CategoriesOnPostsCountAggregate {
  _all: Int!
  categoryId: Int!
  createdAt: Int!
  createdById: Int!
  postId: Int!
  updatedAt: Int!
}

input CategoriesOnPostsCountOrderByAggregateInput {
  categoryId: SortOrder
  createdById: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input CategoriesOnPostsCreateInput {
  category: CategoryCreateNestedOneWithoutCategoriesOnPostsInput!
  createdBy: UserCreateNestedOneWithoutCategoriesOnPostsInput!
  post: PostCreateNestedOneWithoutCategoriesOnPostsInput!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateManyCategoryInput {
  createdById: Int!
  postId: Int!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateManyCategoryInputEnvelope {
  data: [CategoriesOnPostsCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input CategoriesOnPostsCreateManyCreatedByInput {
  categoryId: Int!
  postId: Int!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateManyCreatedByInputEnvelope {
  data: [CategoriesOnPostsCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input CategoriesOnPostsCreateManyInput {
  categoryId: Int!
  createdById: Int!
  postId: Int!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateManyPostInput {
  categoryId: Int!
  createdById: Int!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateManyPostInputEnvelope {
  data: [CategoriesOnPostsCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CategoriesOnPostsCreateNestedManyWithoutCategoryInput {
  connect: [CategoriesOnPostsWhereUniqueInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutCategoryInput!]
  create: [CategoriesOnPostsCreateWithoutCategoryInput!]
  createMany: CategoriesOnPostsCreateManyCategoryInputEnvelope
}

input CategoriesOnPostsCreateNestedManyWithoutCreatedByInput {
  connect: [CategoriesOnPostsWhereUniqueInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutCreatedByInput!]
  create: [CategoriesOnPostsCreateWithoutCreatedByInput!]
  createMany: CategoriesOnPostsCreateManyCreatedByInputEnvelope
}

input CategoriesOnPostsCreateNestedManyWithoutPostInput {
  connect: [CategoriesOnPostsWhereUniqueInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutPostInput!]
  create: [CategoriesOnPostsCreateWithoutPostInput!]
  createMany: CategoriesOnPostsCreateManyPostInputEnvelope
}

input CategoriesOnPostsCreateOrConnectWithoutCategoryInput {
  create: CategoriesOnPostsCreateWithoutCategoryInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsCreateOrConnectWithoutCreatedByInput {
  create: CategoriesOnPostsCreateWithoutCreatedByInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsCreateOrConnectWithoutPostInput {
  create: CategoriesOnPostsCreateWithoutPostInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsCreateWithoutCategoryInput {
  createdBy: UserCreateNestedOneWithoutCategoriesOnPostsInput!
  post: PostCreateNestedOneWithoutCategoriesOnPostsInput!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateWithoutCreatedByInput {
  category: CategoryCreateNestedOneWithoutCategoriesOnPostsInput!
  post: PostCreateNestedOneWithoutCategoriesOnPostsInput!
  updatedAt: DateTimeISO
}

input CategoriesOnPostsCreateWithoutPostInput {
  category: CategoryCreateNestedOneWithoutCategoriesOnPostsInput!
  createdBy: UserCreateNestedOneWithoutCategoriesOnPostsInput!
  updatedAt: DateTimeISO
}

type CategoriesOnPostsGroupBy {
  _avg: CategoriesOnPostsAvgAggregate
  _count: CategoriesOnPostsCountAggregate
  _max: CategoriesOnPostsMaxAggregate
  _min: CategoriesOnPostsMinAggregate
  _sum: CategoriesOnPostsSumAggregate
  categoryId: Int!
  createdAt: DateTimeISO!
  createdById: Int!
  postId: Int!
  updatedAt: DateTimeISO!
}

input CategoriesOnPostsListRelationFilter {
  every: CategoriesOnPostsWhereInput
  none: CategoriesOnPostsWhereInput
  some: CategoriesOnPostsWhereInput
}

type CategoriesOnPostsMaxAggregate {
  categoryId: Int
  createdAt: DateTimeISO
  createdById: Int
  postId: Int
  updatedAt: DateTimeISO
}

input CategoriesOnPostsMaxOrderByAggregateInput {
  categoryId: SortOrder
  createdById: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

type CategoriesOnPostsMinAggregate {
  categoryId: Int
  createdAt: DateTimeISO
  createdById: Int
  postId: Int
  updatedAt: DateTimeISO
}

input CategoriesOnPostsMinOrderByAggregateInput {
  categoryId: SortOrder
  createdById: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input CategoriesOnPostsOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoriesOnPostsOrderByWithAggregationInput {
  _avg: CategoriesOnPostsAvgOrderByAggregateInput
  _count: CategoriesOnPostsCountOrderByAggregateInput
  _max: CategoriesOnPostsMaxOrderByAggregateInput
  _min: CategoriesOnPostsMinOrderByAggregateInput
  _sum: CategoriesOnPostsSumOrderByAggregateInput
  categoryId: SortOrder
  createdById: SortOrder
  postId: SortOrder
  updatedAt: SortOrder
}

input CategoriesOnPostsOrderByWithRelationInput {
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  updatedAt: SortOrder
}

input CategoriesOnPostsPostIdCategoryIdCompoundUniqueInput {
  categoryId: Int!
  postId: Int!
}

enum CategoriesOnPostsScalarFieldEnum {
  categoryId
  createdAt
  createdById
  postId
  updatedAt
}

input CategoriesOnPostsScalarWhereInput {
  AND: [CategoriesOnPostsScalarWhereInput!]
  NOT: [CategoriesOnPostsScalarWhereInput!]
  OR: [CategoriesOnPostsScalarWhereInput!]
  categoryId: IntFilter
  createdById: IntFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CategoriesOnPostsScalarWhereWithAggregatesInput {
  AND: [CategoriesOnPostsScalarWhereWithAggregatesInput!]
  NOT: [CategoriesOnPostsScalarWhereWithAggregatesInput!]
  OR: [CategoriesOnPostsScalarWhereWithAggregatesInput!]
  categoryId: IntWithAggregatesFilter
  createdById: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CategoriesOnPostsSumAggregate {
  categoryId: Int
  createdById: Int
  postId: Int
}

input CategoriesOnPostsSumOrderByAggregateInput {
  categoryId: SortOrder
  createdById: SortOrder
  postId: SortOrder
}

input CategoriesOnPostsUpdateInput {
  category: CategoryUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  createdBy: UserUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  post: PostUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoriesOnPostsUpdateManyMutationInput {
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoriesOnPostsUpdateManyWithWhereWithoutCategoryInput {
  data: CategoriesOnPostsUpdateManyMutationInput!
  where: CategoriesOnPostsScalarWhereInput!
}

input CategoriesOnPostsUpdateManyWithWhereWithoutCreatedByInput {
  data: CategoriesOnPostsUpdateManyMutationInput!
  where: CategoriesOnPostsScalarWhereInput!
}

input CategoriesOnPostsUpdateManyWithWhereWithoutPostInput {
  data: CategoriesOnPostsUpdateManyMutationInput!
  where: CategoriesOnPostsScalarWhereInput!
}

input CategoriesOnPostsUpdateManyWithoutCategoryNestedInput {
  connect: [CategoriesOnPostsWhereUniqueInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutCategoryInput!]
  create: [CategoriesOnPostsCreateWithoutCategoryInput!]
  createMany: CategoriesOnPostsCreateManyCategoryInputEnvelope
  delete: [CategoriesOnPostsWhereUniqueInput!]
  deleteMany: [CategoriesOnPostsScalarWhereInput!]
  disconnect: [CategoriesOnPostsWhereUniqueInput!]
  set: [CategoriesOnPostsWhereUniqueInput!]
  update: [CategoriesOnPostsUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CategoriesOnPostsUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [CategoriesOnPostsUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CategoriesOnPostsUpdateManyWithoutCreatedByNestedInput {
  connect: [CategoriesOnPostsWhereUniqueInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutCreatedByInput!]
  create: [CategoriesOnPostsCreateWithoutCreatedByInput!]
  createMany: CategoriesOnPostsCreateManyCreatedByInputEnvelope
  delete: [CategoriesOnPostsWhereUniqueInput!]
  deleteMany: [CategoriesOnPostsScalarWhereInput!]
  disconnect: [CategoriesOnPostsWhereUniqueInput!]
  set: [CategoriesOnPostsWhereUniqueInput!]
  update: [CategoriesOnPostsUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [CategoriesOnPostsUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [CategoriesOnPostsUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input CategoriesOnPostsUpdateManyWithoutPostNestedInput {
  connect: [CategoriesOnPostsWhereUniqueInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutPostInput!]
  create: [CategoriesOnPostsCreateWithoutPostInput!]
  createMany: CategoriesOnPostsCreateManyPostInputEnvelope
  delete: [CategoriesOnPostsWhereUniqueInput!]
  deleteMany: [CategoriesOnPostsScalarWhereInput!]
  disconnect: [CategoriesOnPostsWhereUniqueInput!]
  set: [CategoriesOnPostsWhereUniqueInput!]
  update: [CategoriesOnPostsUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CategoriesOnPostsUpdateManyWithWhereWithoutPostInput!]
  upsert: [CategoriesOnPostsUpsertWithWhereUniqueWithoutPostInput!]
}

input CategoriesOnPostsUpdateWithWhereUniqueWithoutCategoryInput {
  data: CategoriesOnPostsUpdateWithoutCategoryInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsUpdateWithWhereUniqueWithoutCreatedByInput {
  data: CategoriesOnPostsUpdateWithoutCreatedByInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsUpdateWithWhereUniqueWithoutPostInput {
  data: CategoriesOnPostsUpdateWithoutPostInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsUpdateWithoutCategoryInput {
  createdBy: UserUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  post: PostUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoriesOnPostsUpdateWithoutCreatedByInput {
  category: CategoryUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoriesOnPostsUpdateWithoutPostInput {
  category: CategoryUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  createdBy: UserUpdateOneRequiredWithoutCategoriesOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoriesOnPostsUpsertWithWhereUniqueWithoutCategoryInput {
  create: CategoriesOnPostsCreateWithoutCategoryInput!
  update: CategoriesOnPostsUpdateWithoutCategoryInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsUpsertWithWhereUniqueWithoutCreatedByInput {
  create: CategoriesOnPostsCreateWithoutCreatedByInput!
  update: CategoriesOnPostsUpdateWithoutCreatedByInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsUpsertWithWhereUniqueWithoutPostInput {
  create: CategoriesOnPostsCreateWithoutPostInput!
  update: CategoriesOnPostsUpdateWithoutPostInput!
  where: CategoriesOnPostsWhereUniqueInput!
}

input CategoriesOnPostsWhereInput {
  AND: [CategoriesOnPostsWhereInput!]
  NOT: [CategoriesOnPostsWhereInput!]
  OR: [CategoriesOnPostsWhereInput!]
  category: CategoryRelationFilter
  categoryId: IntFilter
  createdBy: UserRelationFilter
  createdById: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CategoriesOnPostsWhereUniqueInput {
  AND: [CategoriesOnPostsWhereInput!]
  NOT: [CategoriesOnPostsWhereInput!]
  OR: [CategoriesOnPostsWhereInput!]
  category: CategoryRelationFilter
  categoryId: IntFilter
  createdBy: UserRelationFilter
  createdById: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  postId_categoryId: CategoriesOnPostsPostIdCategoryIdCompoundUniqueInput
  updatedAt: DateTimeFilter
}

type Category {
  CategoriesOnPosts(cursor: CategoriesOnPostsWhereUniqueInput, distinct: [CategoriesOnPostsScalarFieldEnum!], orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): [CategoriesOnPosts!]!
  _count: CategoryCount
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
}

type CategoryAvgAggregate {
  id: Float
}

input CategoryAvgOrderByAggregateInput {
  id: SortOrder
}

type CategoryCount {
  CategoriesOnPosts(where: CategoriesOnPostsWhereInput): Int!
}

type CategoryCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input CategoryCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryCreateInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutCategoryInput
  name: String!
  updatedAt: DateTimeISO
}

input CategoryCreateManyInput {
  id: Int
  name: String!
  updatedAt: DateTimeISO
}

input CategoryCreateNestedOneWithoutCategoriesOnPostsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutCategoriesOnPostsInput
  create: CategoryCreateWithoutCategoriesOnPostsInput
}

input CategoryCreateOrConnectWithoutCategoriesOnPostsInput {
  create: CategoryCreateWithoutCategoriesOnPostsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutCategoriesOnPostsInput {
  name: String!
  updatedAt: DateTimeISO
}

type CategoryGroupBy {
  _avg: CategoryAvgAggregate
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  _sum: CategorySumAggregate
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
}

type CategoryMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input CategoryMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CategoryMinAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input CategoryMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByWithAggregationInput {
  _avg: CategoryAvgOrderByAggregateInput
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  _sum: CategorySumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryOrderByWithRelationInput {
  CategoriesOnPosts: CategoriesOnPostsOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CategorySumAggregate {
  id: Int
}

input CategorySumOrderByAggregateInput {
  id: SortOrder
}

input CategoryUpdateInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutCategoryNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutCategoriesOnPostsNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutCategoriesOnPostsInput
  create: CategoryCreateWithoutCategoriesOnPostsInput
  update: CategoryUpdateToOneWithWhereWithoutCategoriesOnPostsInput
  upsert: CategoryUpsertWithoutCategoriesOnPostsInput
}

input CategoryUpdateToOneWithWhereWithoutCategoriesOnPostsInput {
  data: CategoryUpdateWithoutCategoriesOnPostsInput!
  where: CategoryWhereInput
}

input CategoryUpdateWithoutCategoriesOnPostsInput {
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutCategoriesOnPostsInput {
  create: CategoryCreateWithoutCategoriesOnPostsInput!
  update: CategoryUpdateWithoutCategoriesOnPostsInput!
  where: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  CategoriesOnPosts: CategoriesOnPostsListRelationFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  AND: [CategoryWhereInput!]
  CategoriesOnPosts: CategoriesOnPostsListRelationFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: Int
  name: StringFilter
  updatedAt: DateTimeFilter
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type DecodeRes {
  email: String!
  name: String!
  role: String!
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

type File {
  createdAt: DateTimeISO!
  extension: String!
  id: Int!
  name: String!
  path: String!
  updatedAt: DateTimeISO!
  urlPath: String!
}

type FileAvgAggregate {
  id: Float
}

input FileAvgOrderByAggregateInput {
  id: SortOrder
}

type FileCountAggregate {
  _all: Int!
  createdAt: Int!
  extension: Int!
  id: Int!
  name: Int!
  path: Int!
  updatedAt: Int!
  urlPath: Int!
}

input FileCountOrderByAggregateInput {
  extension: SortOrder
  id: SortOrder
  name: SortOrder
  path: SortOrder
  updatedAt: SortOrder
  urlPath: SortOrder
}

input FileCreateInput {
  extension: String!
  name: String!
  path: String!
  updatedAt: DateTimeISO
  urlPath: String!
}

input FileCreateManyInput {
  extension: String!
  id: Int
  name: String!
  path: String!
  updatedAt: DateTimeISO
  urlPath: String!
}

type FileGroupBy {
  _avg: FileAvgAggregate
  _count: FileCountAggregate
  _max: FileMaxAggregate
  _min: FileMinAggregate
  _sum: FileSumAggregate
  createdAt: DateTimeISO!
  extension: String!
  id: Int!
  name: String!
  path: String!
  updatedAt: DateTimeISO!
  urlPath: String!
}

type FileMaxAggregate {
  createdAt: DateTimeISO
  extension: String
  id: Int
  name: String
  path: String
  updatedAt: DateTimeISO
  urlPath: String
}

input FileMaxOrderByAggregateInput {
  extension: SortOrder
  id: SortOrder
  name: SortOrder
  path: SortOrder
  updatedAt: SortOrder
  urlPath: SortOrder
}

type FileMinAggregate {
  createdAt: DateTimeISO
  extension: String
  id: Int
  name: String
  path: String
  updatedAt: DateTimeISO
  urlPath: String
}

input FileMinOrderByAggregateInput {
  extension: SortOrder
  id: SortOrder
  name: SortOrder
  path: SortOrder
  updatedAt: SortOrder
  urlPath: SortOrder
}

input FileOrderByWithAggregationInput {
  _avg: FileAvgOrderByAggregateInput
  _count: FileCountOrderByAggregateInput
  _max: FileMaxOrderByAggregateInput
  _min: FileMinOrderByAggregateInput
  _sum: FileSumOrderByAggregateInput
  extension: SortOrder
  id: SortOrder
  name: SortOrder
  path: SortOrder
  updatedAt: SortOrder
  urlPath: SortOrder
}

input FileOrderByWithRelationInput {
  extension: SortOrder
  id: SortOrder
  name: SortOrder
  path: SortOrder
  updatedAt: SortOrder
  urlPath: SortOrder
}

enum FileScalarFieldEnum {
  createdAt
  extension
  id
  name
  path
  updatedAt
  urlPath
}

input FileScalarWhereWithAggregatesInput {
  AND: [FileScalarWhereWithAggregatesInput!]
  NOT: [FileScalarWhereWithAggregatesInput!]
  OR: [FileScalarWhereWithAggregatesInput!]
  extension: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  path: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  urlPath: StringWithAggregatesFilter
}

type FileSumAggregate {
  id: Int
}

input FileSumOrderByAggregateInput {
  id: SortOrder
}

input FileUpdateInput {
  extension: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  urlPath: StringFieldUpdateOperationsInput
}

input FileUpdateManyMutationInput {
  extension: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  urlPath: StringFieldUpdateOperationsInput
}

input FileWhereInput {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  extension: StringFilter
  id: IntFilter
  name: StringFilter
  path: StringFilter
  updatedAt: DateTimeFilter
  urlPath: StringFilter
}

input FileWhereUniqueInput {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  extension: StringFilter
  id: Int
  name: StringFilter
  path: StringFilter
  updatedAt: DateTimeFilter
  urlPath: StringFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyCategoriesOnPosts(data: [CategoriesOnPostsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyFile(data: [FileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTag(data: [TagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTagsOnPosts(data: [TagsOnPostsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneCategoriesOnPosts(data: CategoriesOnPostsCreateInput!): CategoriesOnPosts!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneFile(data: FileCreateInput!): File!
  createOnePost(data: PostCreateInput!): Post!
  createOneTag(data: TagCreateInput!): Tag!
  createOneTagsOnPosts(data: TagsOnPostsCreateInput!): TagsOnPosts!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCategoriesOnPosts(where: CategoriesOnPostsWhereInput): AffectedRowsOutput!
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  deleteManyFile(where: FileWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyTagsOnPosts(where: TagsOnPostsWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneCategoriesOnPosts(where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneFile(where: FileWhereUniqueInput!): File
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneTagsOnPosts(where: TagsOnPostsWhereUniqueInput!): TagsOnPosts
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyCategoriesOnPosts(data: CategoriesOnPostsUpdateManyMutationInput!, where: CategoriesOnPostsWhereInput): AffectedRowsOutput!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  updateManyFile(data: FileUpdateManyMutationInput!, where: FileWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyTagsOnPosts(data: TagsOnPostsUpdateManyMutationInput!, where: TagsOnPostsWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneCategoriesOnPosts(data: CategoriesOnPostsUpdateInput!, where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneTagsOnPosts(data: TagsOnPostsUpdateInput!, where: TagsOnPostsWhereUniqueInput!): TagsOnPosts
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  uploadFile: File
  uploadFiles: [File!]
  upsertOneCategoriesOnPosts(create: CategoriesOnPostsCreateInput!, update: CategoriesOnPostsUpdateInput!, where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts!
  upsertOneCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOneFile(create: FileCreateInput!, update: FileUpdateInput!, where: FileWhereUniqueInput!): File!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertOneTagsOnPosts(create: TagsOnPostsCreateInput!, update: TagsOnPostsUpdateInput!, where: TagsOnPostsWhereUniqueInput!): TagsOnPosts!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Post {
  CategoriesOnPosts(cursor: CategoriesOnPostsWhereUniqueInput, distinct: [CategoriesOnPostsScalarFieldEnum!], orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): [CategoriesOnPosts!]!
  TagsOnPosts(cursor: TagsOnPostsWhereUniqueInput, distinct: [TagsOnPostsScalarFieldEnum!], orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): [TagsOnPosts!]!
  _count: PostCount
  author: User!
  authorId: Int!
  browNum: Int!
  content: String
  createdAt: DateTimeISO!
  description: String
  favoNum: Int!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTimeISO!
}

type PostAvgAggregate {
  authorId: Float
  browNum: Float
  favoNum: Float
  id: Float
}

input PostAvgOrderByAggregateInput {
  authorId: SortOrder
  browNum: SortOrder
  favoNum: SortOrder
  id: SortOrder
}

type PostCount {
  CategoriesOnPosts(where: CategoriesOnPostsWhereInput): Int!
  TagsOnPosts(where: TagsOnPostsWhereInput): Int!
}

type PostCountAggregate {
  _all: Int!
  authorId: Int!
  browNum: Int!
  content: Int!
  createdAt: Int!
  description: Int!
  favoNum: Int!
  id: Int!
  published: Int!
  title: Int!
  updatedAt: Int!
}

input PostCountOrderByAggregateInput {
  authorId: SortOrder
  browNum: SortOrder
  content: SortOrder
  description: SortOrder
  favoNum: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostCreateInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutPostInput
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutPostInput
  author: UserCreateNestedOneWithoutPostsInput!
  browNum: Int
  content: String
  description: String
  favoNum: Int
  published: Boolean
  title: String!
  updatedAt: DateTimeISO
}

input PostCreateManyAuthorInput {
  browNum: Int
  content: String
  description: String
  favoNum: Int
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTimeISO
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  authorId: Int!
  browNum: Int
  content: String
  description: String
  favoNum: Int
  id: Int
  published: Boolean
  title: String!
  updatedAt: DateTimeISO
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutCategoriesOnPostsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCategoriesOnPostsInput
  create: PostCreateWithoutCategoriesOnPostsInput
}

input PostCreateNestedOneWithoutTagsOnPostsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutTagsOnPostsInput
  create: PostCreateWithoutTagsOnPostsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCategoriesOnPostsInput {
  create: PostCreateWithoutCategoriesOnPostsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutTagsOnPostsInput {
  create: PostCreateWithoutTagsOnPostsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutPostInput
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutPostInput
  browNum: Int
  content: String
  description: String
  favoNum: Int
  published: Boolean
  title: String!
  updatedAt: DateTimeISO
}

input PostCreateWithoutCategoriesOnPostsInput {
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutPostInput
  author: UserCreateNestedOneWithoutPostsInput!
  browNum: Int
  content: String
  description: String
  favoNum: Int
  published: Boolean
  title: String!
  updatedAt: DateTimeISO
}

input PostCreateWithoutTagsOnPostsInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutPostInput
  author: UserCreateNestedOneWithoutPostsInput!
  browNum: Int
  content: String
  description: String
  favoNum: Int
  published: Boolean
  title: String!
  updatedAt: DateTimeISO
}

type PostGroupBy {
  _avg: PostAvgAggregate
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  _sum: PostSumAggregate
  authorId: Int!
  browNum: Int!
  content: String
  createdAt: DateTimeISO!
  description: String
  favoNum: Int!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTimeISO!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  authorId: Int
  browNum: Int
  content: String
  createdAt: DateTimeISO
  description: String
  favoNum: Int
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTimeISO
}

input PostMaxOrderByAggregateInput {
  authorId: SortOrder
  browNum: SortOrder
  content: SortOrder
  description: SortOrder
  favoNum: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type PostMinAggregate {
  authorId: Int
  browNum: Int
  content: String
  createdAt: DateTimeISO
  description: String
  favoNum: Int
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTimeISO
}

input PostMinOrderByAggregateInput {
  authorId: SortOrder
  browNum: SortOrder
  content: SortOrder
  description: SortOrder
  favoNum: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _avg: PostAvgOrderByAggregateInput
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  _sum: PostSumOrderByAggregateInput
  authorId: SortOrder
  browNum: SortOrder
  content: SortOrderInput
  description: SortOrderInput
  favoNum: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostOrderByWithRelationInput {
  CategoriesOnPosts: CategoriesOnPostsOrderByRelationAggregateInput
  TagsOnPosts: TagsOnPostsOrderByRelationAggregateInput
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  browNum: SortOrder
  content: SortOrderInput
  description: SortOrderInput
  favoNum: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  authorId
  browNum
  content
  createdAt
  description
  favoNum
  id
  published
  title
  updatedAt
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: IntFilter
  browNum: IntFilter
  content: StringNullableFilter
  description: StringNullableFilter
  favoNum: IntFilter
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  authorId: IntWithAggregatesFilter
  browNum: IntWithAggregatesFilter
  content: StringNullableWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  favoNum: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  published: BoolWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PostSumAggregate {
  authorId: Int
  browNum: Int
  favoNum: Int
  id: Int
}

input PostSumOrderByAggregateInput {
  authorId: SortOrder
  browNum: SortOrder
  favoNum: SortOrder
  id: SortOrder
}

input PostUpdateInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutPostNestedInput
  TagsOnPosts: TagsOnPostsUpdateManyWithoutPostNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  browNum: IntFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  favoNum: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  browNum: IntFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  favoNum: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneRequiredWithoutCategoriesOnPostsNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCategoriesOnPostsInput
  create: PostCreateWithoutCategoriesOnPostsInput
  update: PostUpdateToOneWithWhereWithoutCategoriesOnPostsInput
  upsert: PostUpsertWithoutCategoriesOnPostsInput
}

input PostUpdateOneRequiredWithoutTagsOnPostsNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutTagsOnPostsInput
  create: PostCreateWithoutTagsOnPostsInput
  update: PostUpdateToOneWithWhereWithoutTagsOnPostsInput
  upsert: PostUpsertWithoutTagsOnPostsInput
}

input PostUpdateToOneWithWhereWithoutCategoriesOnPostsInput {
  data: PostUpdateWithoutCategoriesOnPostsInput!
  where: PostWhereInput
}

input PostUpdateToOneWithWhereWithoutTagsOnPostsInput {
  data: PostUpdateWithoutTagsOnPostsInput!
  where: PostWhereInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutPostNestedInput
  TagsOnPosts: TagsOnPostsUpdateManyWithoutPostNestedInput
  browNum: IntFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  favoNum: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutCategoriesOnPostsInput {
  TagsOnPosts: TagsOnPostsUpdateManyWithoutPostNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  browNum: IntFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  favoNum: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateWithoutTagsOnPostsInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutPostNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  browNum: IntFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  favoNum: IntFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCategoriesOnPostsInput {
  create: PostCreateWithoutCategoriesOnPostsInput!
  update: PostUpdateWithoutCategoriesOnPostsInput!
  where: PostWhereInput
}

input PostUpsertWithoutTagsOnPostsInput {
  create: PostCreateWithoutTagsOnPostsInput!
  update: PostUpdateWithoutTagsOnPostsInput!
  where: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  CategoriesOnPosts: CategoriesOnPostsListRelationFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  TagsOnPosts: TagsOnPostsListRelationFilter
  author: UserRelationFilter
  authorId: IntFilter
  browNum: IntFilter
  content: StringNullableFilter
  description: StringNullableFilter
  favoNum: IntFilter
  id: IntFilter
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  CategoriesOnPosts: CategoriesOnPostsListRelationFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  TagsOnPosts: TagsOnPostsListRelationFilter
  author: UserRelationFilter
  authorId: IntFilter
  browNum: IntFilter
  content: StringNullableFilter
  description: StringNullableFilter
  favoNum: IntFilter
  id: Int
  published: BoolFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type Query {
  aggregateCategoriesOnPosts(cursor: CategoriesOnPostsWhereUniqueInput, orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): AggregateCategoriesOnPosts!
  aggregateCategory(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateFile(cursor: FileWhereUniqueInput, orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): AggregateFile!
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateTagsOnPosts(cursor: TagsOnPostsWhereUniqueInput, orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): AggregateTagsOnPosts!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  auth(email: String!, password: String!): AuthRes
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  decode: DecodeRes
  file(where: FileWhereUniqueInput!): File
  files(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): [File!]!
  findFirstCategoriesOnPosts(cursor: CategoriesOnPostsWhereUniqueInput, distinct: [CategoriesOnPostsScalarFieldEnum!], orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): CategoriesOnPosts
  findFirstCategoriesOnPostsOrThrow(cursor: CategoriesOnPostsWhereUniqueInput, distinct: [CategoriesOnPostsScalarFieldEnum!], orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): CategoriesOnPosts
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstCategoryOrThrow(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstFile(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): File
  findFirstFileOrThrow(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): File
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPostOrThrow(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstTagOrThrow(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstTagsOnPosts(cursor: TagsOnPostsWhereUniqueInput, distinct: [TagsOnPostsScalarFieldEnum!], orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): TagsOnPosts
  findFirstTagsOnPostsOrThrow(cursor: TagsOnPostsWhereUniqueInput, distinct: [TagsOnPostsScalarFieldEnum!], orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): TagsOnPosts
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findManyCategoriesOnPosts(cursor: CategoriesOnPostsWhereUniqueInput, distinct: [CategoriesOnPostsScalarFieldEnum!], orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): [CategoriesOnPosts!]!
  findManyTagsOnPosts(cursor: TagsOnPostsWhereUniqueInput, distinct: [TagsOnPostsScalarFieldEnum!], orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): [TagsOnPosts!]!
  findUniqueCategoriesOnPosts(where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  findUniqueCategoriesOnPostsOrThrow(where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  findUniqueTagsOnPosts(where: TagsOnPostsWhereUniqueInput!): TagsOnPosts
  findUniqueTagsOnPostsOrThrow(where: TagsOnPostsWhereUniqueInput!): TagsOnPosts
  getCategory(where: CategoryWhereUniqueInput!): Category
  getFile(where: FileWhereUniqueInput!): File
  getPost(where: PostWhereUniqueInput!): Post
  getTag(where: TagWhereUniqueInput!): Tag
  getUser(where: UserWhereUniqueInput!): User
  groupByCategoriesOnPosts(by: [CategoriesOnPostsScalarFieldEnum!]!, having: CategoriesOnPostsScalarWhereWithAggregatesInput, orderBy: [CategoriesOnPostsOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): [CategoriesOnPostsGroupBy!]!
  groupByCategory(by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, orderBy: [CategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoryWhereInput): [CategoryGroupBy!]!
  groupByFile(by: [FileScalarFieldEnum!]!, having: FileScalarWhereWithAggregatesInput, orderBy: [FileOrderByWithAggregationInput!], skip: Int, take: Int, where: FileWhereInput): [FileGroupBy!]!
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByTag(by: [TagScalarFieldEnum!]!, having: TagScalarWhereWithAggregatesInput, orderBy: [TagOrderByWithAggregationInput!], skip: Int, take: Int, where: TagWhereInput): [TagGroupBy!]!
  groupByTagsOnPosts(by: [TagsOnPostsScalarFieldEnum!]!, having: TagsOnPostsScalarWhereWithAggregatesInput, orderBy: [TagsOnPostsOrderByWithAggregationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): [TagsOnPostsGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  sts: STSRes
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  ROOT
  USER
}

type STSRes {
  AccessKeySecret: String!
  AccesskeyId: String!
  Expiration: String!
  SecurityToken: String!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  TagsOnPosts(cursor: TagsOnPostsWhereUniqueInput, distinct: [TagsOnPostsScalarFieldEnum!], orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): [TagsOnPosts!]!
  _count: TagCount
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
}

type TagAvgAggregate {
  id: Float
}

input TagAvgOrderByAggregateInput {
  id: SortOrder
}

type TagCount {
  TagsOnPosts(where: TagsOnPostsWhereInput): Int!
}

type TagCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input TagCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagCreateInput {
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutTagInput
  name: String!
  updatedAt: DateTimeISO
}

input TagCreateManyInput {
  id: Int
  name: String!
  updatedAt: DateTimeISO
}

input TagCreateNestedOneWithoutTagsOnPostsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnPostsInput
  create: TagCreateWithoutTagsOnPostsInput
}

input TagCreateOrConnectWithoutTagsOnPostsInput {
  create: TagCreateWithoutTagsOnPostsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutTagsOnPostsInput {
  name: String!
  updatedAt: DateTimeISO
}

type TagGroupBy {
  _avg: TagAvgAggregate
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  _sum: TagSumAggregate
  createdAt: DateTimeISO!
  id: Int!
  name: String!
  updatedAt: DateTimeISO!
}

type TagMaxAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input TagMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type TagMinAggregate {
  createdAt: DateTimeISO
  id: Int
  name: String
  updatedAt: DateTimeISO
}

input TagMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagOrderByWithAggregationInput {
  _avg: TagAvgOrderByAggregateInput
  _count: TagCountOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  _sum: TagSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagOrderByWithRelationInput {
  TagsOnPosts: TagsOnPostsOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TagRelationFilter {
  is: TagWhereInput
  isNot: TagWhereInput
}

enum TagScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input TagScalarWhereWithAggregatesInput {
  AND: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type TagSumAggregate {
  id: Int
}

input TagSumOrderByAggregateInput {
  id: SortOrder
}

input TagUpdateInput {
  TagsOnPosts: TagsOnPostsUpdateManyWithoutTagNestedInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpdateOneRequiredWithoutTagsOnPostsNestedInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnPostsInput
  create: TagCreateWithoutTagsOnPostsInput
  update: TagUpdateToOneWithWhereWithoutTagsOnPostsInput
  upsert: TagUpsertWithoutTagsOnPostsInput
}

input TagUpdateToOneWithWhereWithoutTagsOnPostsInput {
  data: TagUpdateWithoutTagsOnPostsInput!
  where: TagWhereInput
}

input TagUpdateWithoutTagsOnPostsInput {
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagUpsertWithoutTagsOnPostsInput {
  create: TagCreateWithoutTagsOnPostsInput!
  update: TagUpdateWithoutTagsOnPostsInput!
  where: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  TagsOnPosts: TagsOnPostsListRelationFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  TagsOnPosts: TagsOnPostsListRelationFilter
  id: Int
  name: StringFilter
  updatedAt: DateTimeFilter
}

type TagsOnPosts {
  createdAt: DateTimeISO!
  createdBy: User!
  createdById: Int!
  post: Post!
  postId: Int!
  tag: Tag!
  tagId: Int!
  updatedAt: DateTimeISO!
}

type TagsOnPostsAvgAggregate {
  createdById: Float
  postId: Float
  tagId: Float
}

input TagsOnPostsAvgOrderByAggregateInput {
  createdById: SortOrder
  postId: SortOrder
  tagId: SortOrder
}

type TagsOnPostsCountAggregate {
  _all: Int!
  createdAt: Int!
  createdById: Int!
  postId: Int!
  tagId: Int!
  updatedAt: Int!
}

input TagsOnPostsCountOrderByAggregateInput {
  createdById: SortOrder
  postId: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

input TagsOnPostsCreateInput {
  createdBy: UserCreateNestedOneWithoutTagsOnPostsInput!
  post: PostCreateNestedOneWithoutTagsOnPostsInput!
  tag: TagCreateNestedOneWithoutTagsOnPostsInput!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateManyCreatedByInput {
  postId: Int!
  tagId: Int!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateManyCreatedByInputEnvelope {
  data: [TagsOnPostsCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input TagsOnPostsCreateManyInput {
  createdById: Int!
  postId: Int!
  tagId: Int!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateManyPostInput {
  createdById: Int!
  tagId: Int!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateManyPostInputEnvelope {
  data: [TagsOnPostsCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input TagsOnPostsCreateManyTagInput {
  createdById: Int!
  postId: Int!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateManyTagInputEnvelope {
  data: [TagsOnPostsCreateManyTagInput!]!
  skipDuplicates: Boolean
}

input TagsOnPostsCreateNestedManyWithoutCreatedByInput {
  connect: [TagsOnPostsWhereUniqueInput!]
  connectOrCreate: [TagsOnPostsCreateOrConnectWithoutCreatedByInput!]
  create: [TagsOnPostsCreateWithoutCreatedByInput!]
  createMany: TagsOnPostsCreateManyCreatedByInputEnvelope
}

input TagsOnPostsCreateNestedManyWithoutPostInput {
  connect: [TagsOnPostsWhereUniqueInput!]
  connectOrCreate: [TagsOnPostsCreateOrConnectWithoutPostInput!]
  create: [TagsOnPostsCreateWithoutPostInput!]
  createMany: TagsOnPostsCreateManyPostInputEnvelope
}

input TagsOnPostsCreateNestedManyWithoutTagInput {
  connect: [TagsOnPostsWhereUniqueInput!]
  connectOrCreate: [TagsOnPostsCreateOrConnectWithoutTagInput!]
  create: [TagsOnPostsCreateWithoutTagInput!]
  createMany: TagsOnPostsCreateManyTagInputEnvelope
}

input TagsOnPostsCreateOrConnectWithoutCreatedByInput {
  create: TagsOnPostsCreateWithoutCreatedByInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsCreateOrConnectWithoutPostInput {
  create: TagsOnPostsCreateWithoutPostInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsCreateOrConnectWithoutTagInput {
  create: TagsOnPostsCreateWithoutTagInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsCreateWithoutCreatedByInput {
  post: PostCreateNestedOneWithoutTagsOnPostsInput!
  tag: TagCreateNestedOneWithoutTagsOnPostsInput!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateWithoutPostInput {
  createdBy: UserCreateNestedOneWithoutTagsOnPostsInput!
  tag: TagCreateNestedOneWithoutTagsOnPostsInput!
  updatedAt: DateTimeISO
}

input TagsOnPostsCreateWithoutTagInput {
  createdBy: UserCreateNestedOneWithoutTagsOnPostsInput!
  post: PostCreateNestedOneWithoutTagsOnPostsInput!
  updatedAt: DateTimeISO
}

type TagsOnPostsGroupBy {
  _avg: TagsOnPostsAvgAggregate
  _count: TagsOnPostsCountAggregate
  _max: TagsOnPostsMaxAggregate
  _min: TagsOnPostsMinAggregate
  _sum: TagsOnPostsSumAggregate
  createdAt: DateTimeISO!
  createdById: Int!
  postId: Int!
  tagId: Int!
  updatedAt: DateTimeISO!
}

input TagsOnPostsListRelationFilter {
  every: TagsOnPostsWhereInput
  none: TagsOnPostsWhereInput
  some: TagsOnPostsWhereInput
}

type TagsOnPostsMaxAggregate {
  createdAt: DateTimeISO
  createdById: Int
  postId: Int
  tagId: Int
  updatedAt: DateTimeISO
}

input TagsOnPostsMaxOrderByAggregateInput {
  createdById: SortOrder
  postId: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

type TagsOnPostsMinAggregate {
  createdAt: DateTimeISO
  createdById: Int
  postId: Int
  tagId: Int
  updatedAt: DateTimeISO
}

input TagsOnPostsMinOrderByAggregateInput {
  createdById: SortOrder
  postId: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

input TagsOnPostsOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagsOnPostsOrderByWithAggregationInput {
  _avg: TagsOnPostsAvgOrderByAggregateInput
  _count: TagsOnPostsCountOrderByAggregateInput
  _max: TagsOnPostsMaxOrderByAggregateInput
  _min: TagsOnPostsMinOrderByAggregateInput
  _sum: TagsOnPostsSumOrderByAggregateInput
  createdById: SortOrder
  postId: SortOrder
  tagId: SortOrder
  updatedAt: SortOrder
}

input TagsOnPostsOrderByWithRelationInput {
  createdBy: UserOrderByWithRelationInput
  createdById: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  tag: TagOrderByWithRelationInput
  tagId: SortOrder
  updatedAt: SortOrder
}

input TagsOnPostsPostIdTagIdCompoundUniqueInput {
  postId: Int!
  tagId: Int!
}

enum TagsOnPostsScalarFieldEnum {
  createdAt
  createdById
  postId
  tagId
  updatedAt
}

input TagsOnPostsScalarWhereInput {
  AND: [TagsOnPostsScalarWhereInput!]
  NOT: [TagsOnPostsScalarWhereInput!]
  OR: [TagsOnPostsScalarWhereInput!]
  createdById: IntFilter
  postId: IntFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
}

input TagsOnPostsScalarWhereWithAggregatesInput {
  AND: [TagsOnPostsScalarWhereWithAggregatesInput!]
  NOT: [TagsOnPostsScalarWhereWithAggregatesInput!]
  OR: [TagsOnPostsScalarWhereWithAggregatesInput!]
  createdById: IntWithAggregatesFilter
  postId: IntWithAggregatesFilter
  tagId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type TagsOnPostsSumAggregate {
  createdById: Int
  postId: Int
  tagId: Int
}

input TagsOnPostsSumOrderByAggregateInput {
  createdById: SortOrder
  postId: SortOrder
  tagId: SortOrder
}

input TagsOnPostsUpdateInput {
  createdBy: UserUpdateOneRequiredWithoutTagsOnPostsNestedInput
  post: PostUpdateOneRequiredWithoutTagsOnPostsNestedInput
  tag: TagUpdateOneRequiredWithoutTagsOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPostsUpdateManyMutationInput {
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPostsUpdateManyWithWhereWithoutCreatedByInput {
  data: TagsOnPostsUpdateManyMutationInput!
  where: TagsOnPostsScalarWhereInput!
}

input TagsOnPostsUpdateManyWithWhereWithoutPostInput {
  data: TagsOnPostsUpdateManyMutationInput!
  where: TagsOnPostsScalarWhereInput!
}

input TagsOnPostsUpdateManyWithWhereWithoutTagInput {
  data: TagsOnPostsUpdateManyMutationInput!
  where: TagsOnPostsScalarWhereInput!
}

input TagsOnPostsUpdateManyWithoutCreatedByNestedInput {
  connect: [TagsOnPostsWhereUniqueInput!]
  connectOrCreate: [TagsOnPostsCreateOrConnectWithoutCreatedByInput!]
  create: [TagsOnPostsCreateWithoutCreatedByInput!]
  createMany: TagsOnPostsCreateManyCreatedByInputEnvelope
  delete: [TagsOnPostsWhereUniqueInput!]
  deleteMany: [TagsOnPostsScalarWhereInput!]
  disconnect: [TagsOnPostsWhereUniqueInput!]
  set: [TagsOnPostsWhereUniqueInput!]
  update: [TagsOnPostsUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [TagsOnPostsUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [TagsOnPostsUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TagsOnPostsUpdateManyWithoutPostNestedInput {
  connect: [TagsOnPostsWhereUniqueInput!]
  connectOrCreate: [TagsOnPostsCreateOrConnectWithoutPostInput!]
  create: [TagsOnPostsCreateWithoutPostInput!]
  createMany: TagsOnPostsCreateManyPostInputEnvelope
  delete: [TagsOnPostsWhereUniqueInput!]
  deleteMany: [TagsOnPostsScalarWhereInput!]
  disconnect: [TagsOnPostsWhereUniqueInput!]
  set: [TagsOnPostsWhereUniqueInput!]
  update: [TagsOnPostsUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [TagsOnPostsUpdateManyWithWhereWithoutPostInput!]
  upsert: [TagsOnPostsUpsertWithWhereUniqueWithoutPostInput!]
}

input TagsOnPostsUpdateManyWithoutTagNestedInput {
  connect: [TagsOnPostsWhereUniqueInput!]
  connectOrCreate: [TagsOnPostsCreateOrConnectWithoutTagInput!]
  create: [TagsOnPostsCreateWithoutTagInput!]
  createMany: TagsOnPostsCreateManyTagInputEnvelope
  delete: [TagsOnPostsWhereUniqueInput!]
  deleteMany: [TagsOnPostsScalarWhereInput!]
  disconnect: [TagsOnPostsWhereUniqueInput!]
  set: [TagsOnPostsWhereUniqueInput!]
  update: [TagsOnPostsUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [TagsOnPostsUpdateManyWithWhereWithoutTagInput!]
  upsert: [TagsOnPostsUpsertWithWhereUniqueWithoutTagInput!]
}

input TagsOnPostsUpdateWithWhereUniqueWithoutCreatedByInput {
  data: TagsOnPostsUpdateWithoutCreatedByInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsUpdateWithWhereUniqueWithoutPostInput {
  data: TagsOnPostsUpdateWithoutPostInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsUpdateWithWhereUniqueWithoutTagInput {
  data: TagsOnPostsUpdateWithoutTagInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsUpdateWithoutCreatedByInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutTagsOnPostsNestedInput
  tag: TagUpdateOneRequiredWithoutTagsOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPostsUpdateWithoutPostInput {
  createdBy: UserUpdateOneRequiredWithoutTagsOnPostsNestedInput
  tag: TagUpdateOneRequiredWithoutTagsOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPostsUpdateWithoutTagInput {
  createdBy: UserUpdateOneRequiredWithoutTagsOnPostsNestedInput
  post: PostUpdateOneRequiredWithoutTagsOnPostsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPostsUpsertWithWhereUniqueWithoutCreatedByInput {
  create: TagsOnPostsCreateWithoutCreatedByInput!
  update: TagsOnPostsUpdateWithoutCreatedByInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsUpsertWithWhereUniqueWithoutPostInput {
  create: TagsOnPostsCreateWithoutPostInput!
  update: TagsOnPostsUpdateWithoutPostInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsUpsertWithWhereUniqueWithoutTagInput {
  create: TagsOnPostsCreateWithoutTagInput!
  update: TagsOnPostsUpdateWithoutTagInput!
  where: TagsOnPostsWhereUniqueInput!
}

input TagsOnPostsWhereInput {
  AND: [TagsOnPostsWhereInput!]
  NOT: [TagsOnPostsWhereInput!]
  OR: [TagsOnPostsWhereInput!]
  createdBy: UserRelationFilter
  createdById: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  tag: TagRelationFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
}

input TagsOnPostsWhereUniqueInput {
  AND: [TagsOnPostsWhereInput!]
  NOT: [TagsOnPostsWhereInput!]
  OR: [TagsOnPostsWhereInput!]
  createdBy: UserRelationFilter
  createdById: IntFilter
  post: PostRelationFilter
  postId: IntFilter
  postId_tagId: TagsOnPostsPostIdTagIdCompoundUniqueInput
  tag: TagRelationFilter
  tagId: IntFilter
  updatedAt: DateTimeFilter
}

type User {
  CategoriesOnPosts(cursor: CategoriesOnPostsWhereUniqueInput, distinct: [CategoriesOnPostsScalarFieldEnum!], orderBy: [CategoriesOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: CategoriesOnPostsWhereInput): [CategoriesOnPosts!]!
  TagsOnPosts(cursor: TagsOnPostsWhereUniqueInput, distinct: [TagsOnPostsScalarFieldEnum!], orderBy: [TagsOnPostsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPostsWhereInput): [TagsOnPosts!]!
  _count: UserCount
  avatar: String
  createdAt: DateTimeISO!
  email: String!
  id: Int!
  nickName: String
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  role: Role!
  updatedAt: DateTimeISO!
}

type UserAvgAggregate {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCount {
  CategoriesOnPosts(where: CategoriesOnPostsWhereInput): Int!
  TagsOnPosts(where: TagsOnPostsWhereInput): Int!
  posts(where: PostWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  avatar: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  nickName: Int!
  password: Int!
  role: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  avatar: SortOrder
  email: SortOrder
  id: SortOrder
  nickName: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutCreatedByInput
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutCreatedByInput
  avatar: String
  email: String!
  nickName: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  role: Role
  updatedAt: DateTimeISO
}

input UserCreateManyInput {
  avatar: String
  email: String!
  id: Int
  nickName: String
  password: String!
  role: Role
  updatedAt: DateTimeISO
}

input UserCreateNestedOneWithoutCategoriesOnPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCategoriesOnPostsInput
  create: UserCreateWithoutCategoriesOnPostsInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutTagsOnPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTagsOnPostsInput
  create: UserCreateWithoutTagsOnPostsInput
}

input UserCreateOrConnectWithoutCategoriesOnPostsInput {
  create: UserCreateWithoutCategoriesOnPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTagsOnPostsInput {
  create: UserCreateWithoutTagsOnPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCategoriesOnPostsInput {
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutCreatedByInput
  avatar: String
  email: String!
  nickName: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  role: Role
  updatedAt: DateTimeISO
}

input UserCreateWithoutPostsInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutCreatedByInput
  TagsOnPosts: TagsOnPostsCreateNestedManyWithoutCreatedByInput
  avatar: String
  email: String!
  nickName: String
  password: String!
  role: Role
  updatedAt: DateTimeISO
}

input UserCreateWithoutTagsOnPostsInput {
  CategoriesOnPosts: CategoriesOnPostsCreateNestedManyWithoutCreatedByInput
  avatar: String
  email: String!
  nickName: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  role: Role
  updatedAt: DateTimeISO
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  avatar: String
  createdAt: DateTimeISO!
  email: String!
  id: Int!
  nickName: String
  password: String!
  role: Role!
  updatedAt: DateTimeISO!
}

type UserMaxAggregate {
  avatar: String
  createdAt: DateTimeISO
  email: String
  id: Int
  nickName: String
  password: String
  role: Role
  updatedAt: DateTimeISO
}

input UserMaxOrderByAggregateInput {
  avatar: SortOrder
  email: SortOrder
  id: SortOrder
  nickName: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  avatar: String
  createdAt: DateTimeISO
  email: String
  id: Int
  nickName: String
  password: String
  role: Role
  updatedAt: DateTimeISO
}

input UserMinOrderByAggregateInput {
  avatar: SortOrder
  email: SortOrder
  id: SortOrder
  nickName: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  avatar: SortOrderInput
  email: SortOrder
  id: SortOrder
  nickName: SortOrderInput
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  CategoriesOnPosts: CategoriesOnPostsOrderByRelationAggregateInput
  TagsOnPosts: TagsOnPostsOrderByRelationAggregateInput
  avatar: SortOrderInput
  email: SortOrder
  id: SortOrder
  nickName: SortOrderInput
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  role: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  avatar
  createdAt
  email
  id
  nickName
  password
  role
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  avatar: StringNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  nickName: StringNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregate {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUpdateInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutCreatedByNestedInput
  TagsOnPosts: TagsOnPostsUpdateManyWithoutCreatedByNestedInput
  avatar: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  nickName: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  nickName: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCategoriesOnPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCategoriesOnPostsInput
  create: UserCreateWithoutCategoriesOnPostsInput
  update: UserUpdateToOneWithWhereWithoutCategoriesOnPostsInput
  upsert: UserUpsertWithoutCategoriesOnPostsInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateToOneWithWhereWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutTagsOnPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTagsOnPostsInput
  create: UserCreateWithoutTagsOnPostsInput
  update: UserUpdateToOneWithWhereWithoutTagsOnPostsInput
  upsert: UserUpsertWithoutTagsOnPostsInput
}

input UserUpdateToOneWithWhereWithoutCategoriesOnPostsInput {
  data: UserUpdateWithoutCategoriesOnPostsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutPostsInput {
  data: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTagsOnPostsInput {
  data: UserUpdateWithoutTagsOnPostsInput!
  where: UserWhereInput
}

input UserUpdateWithoutCategoriesOnPostsInput {
  TagsOnPosts: TagsOnPostsUpdateManyWithoutCreatedByNestedInput
  avatar: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  nickName: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutCreatedByNestedInput
  TagsOnPosts: TagsOnPostsUpdateManyWithoutCreatedByNestedInput
  avatar: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  nickName: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTagsOnPostsInput {
  CategoriesOnPosts: CategoriesOnPostsUpdateManyWithoutCreatedByNestedInput
  avatar: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  nickName: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutCategoriesOnPostsInput {
  create: UserCreateWithoutCategoriesOnPostsInput!
  update: UserUpdateWithoutCategoriesOnPostsInput!
  where: UserWhereInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpsertWithoutTagsOnPostsInput {
  create: UserCreateWithoutTagsOnPostsInput!
  update: UserUpdateWithoutTagsOnPostsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  CategoriesOnPosts: CategoriesOnPostsListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  TagsOnPosts: TagsOnPostsListRelationFilter
  avatar: StringNullableFilter
  email: StringFilter
  id: IntFilter
  nickName: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  CategoriesOnPosts: CategoriesOnPostsListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  TagsOnPosts: TagsOnPostsListRelationFilter
  avatar: StringNullableFilter
  email: String
  id: Int
  nickName: StringNullableFilter
  password: StringFilter
  posts: PostListRelationFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
}